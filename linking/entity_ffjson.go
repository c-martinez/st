// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: entity.go
// DO NOT EDIT!

package linking

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Entity) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Entity) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"target":`)
	fflib.WriteJsonString(buf, string(mj.Target))
	buf.WriteString(`,"ngramcount":`)
	fflib.AppendFloat(buf, float64(mj.NGramCount), 'g', -1, 64)
	buf.WriteString(`,"linkcount":`)
	fflib.AppendFloat(buf, float64(mj.LinkCount), 'g', -1, 64)
	buf.WriteString(`,"commonness":`)
	fflib.AppendFloat(buf, float64(mj.Commonness), 'g', -1, 64)
	buf.WriteString(`,"senseprob":`)
	fflib.AppendFloat(buf, float64(mj.Senseprob), 'g', -1, 64)
	buf.WriteString(`,"offset":`)
	fflib.FormatBits2(buf, uint64(mj.Offset), 10, mj.Offset < 0)
	buf.WriteString(`,"length":`)
	fflib.FormatBits2(buf, uint64(mj.Length), 10, mj.Length < 0)
	buf.WriteByte('}')
	return nil
}
